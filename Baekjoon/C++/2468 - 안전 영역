#include <iostream>
#include <vector>
#include <stack>
#include <queue>
#include <algorithm>
#include <memory.h>

#define INF 1e9
#define MAX 100 + 1

using namespace std;

// 2468 - 안전 영역
int n, maxValue, cnt = 0, result = 0;
int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, -1, 0, 1};
int graph[MAX][MAX];
bool isVisited[MAX][MAX];
queue<pair<int, int>> que; // bfs


void input(){
    scanf("%d", &n);
    for(int i = 0; i < n; i++){
        for(int k = 0; k < n; k++){
            scanf("%d", &graph[i][k]);
            maxValue = max(maxValue, graph[i][k]);
        }
    }
}

void init(){
    memset(isVisited, false, sizeof(isVisited));
    cnt = 0;
}

bool isInside(int y, int x){
    return (0 <= y && y < n)&&(0 <= x && x < n);
}

void BFS(int y, int x, int height){
    que.push(make_pair(y, x));
    isVisited[y][x] = true;

    while(!que.empty()){
        int cur_y = que.front().first;
        int cur_x = que.front().second;
        que.pop();

        for(int i = 0; i < 4; i++){
            int next_y = cur_y + dy[i];
            int next_x = cur_x + dx[i];

            if(isInside(next_y, next_x) && graph[next_y][next_x] > height && !isVisited[next_y][next_x]){
                que.push(make_pair(next_y, next_x));
                isVisited[next_y][next_x] = true;
            }
        }
    }
}



int main(){

    input();
    for(int height = 0; height <= maxValue; height++){
        init();

        for(int i = 0; i < n; i++){
            for(int k = 0; k < n; k++){
                if(!isVisited[i][k] && graph[i][k] > height){
                    BFS(i, k, height);
                    cnt++;
                }
            }
        }

        if(cnt > result){
            result = cnt;
        }
    }

    printf("%d", result);


    return 0;
}
