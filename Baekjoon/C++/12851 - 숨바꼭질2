#include <iostream>
#include <queue>

using namespace std;
const int MAX = 100000 + 1;

int result = 0, min_time;
bool isVisited[MAX];


void BFS(int n, int k){
    queue<pair<int, int>> q;
    q.push(make_pair(n, 0));
    isVisited[n] = true;

    while (!q.empty()){
        int cur_n = q.front().first;
        int cur_t = q.front().second;
        q.pop();

        isVisited[cur_n] = true;

        if (min_time && min_time == cur_t && cur_n == k) // 같은 시간에 재 방문 시
            result++;

        if (!min_time && cur_n == k){ // 첫 방문 시
            min_time = cur_t;
            result++;
        }

        if (cur_n + 1 < MAX && !isVisited[cur_n + 1])
            q.push(make_pair(cur_n + 1, cur_t + 1));
        if (cur_n - 1 >= 0 && !isVisited[cur_n - 1])
            q.push(make_pair(cur_n - 1, cur_t + 1));
        if (cur_n * 2 < MAX && !isVisited[cur_n * 2])
            q.push(make_pair(cur_n * 2, cur_t + 1));

    }
}



int main(void){
    
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n, k;
    cin >> n >> k;

    BFS(n, k);
    cout << min_time << endl << result;

    return 0;
}
