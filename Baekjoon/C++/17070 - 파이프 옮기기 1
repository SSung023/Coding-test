#include <iostream>
#include <algorithm>
#include <string>
#include <string.h>
#include <math.h>
#include <vector>
#include <queue>

#define MAX 16 + 1
using namespace std;

// 17070 - 파이프 옮기기 1
int n;
int dp[MAX][MAX][3];
vector<vector<int>> info;


void input(){
    cin >> n;
    info.assign(n + 1, vector<int>(n + 1, 0));

    for(int i = 1; i <= n; i++){
        for(int k = 1; k <= n; k++){
            cin >> info[i][k];
        }
    }
}

void getWay(){
    // 가로로 갈 수 있음. [1][i][0]은 모두 1
    for(int i = 2; i <= n; i++){
        if(info[1][i] == 1){ // 벽이 있다면 더 이상 갈 수 없으므로 break
            break;
        }
        dp[1][i][0] = 1;
    }

    for(int i = 2; i <= n; i++){
        for(int k = 1; k <= n; k++){
            if(info[i][k] != 1){ // 벽이 아닌 경우에만 실행
                dp[i][k][0] = dp[i][k - 1][0] + dp[i][k - 1][2]; // 가로로 오는 경우
                dp[i][k][1] = dp[i - 1][k][1] + dp[i - 1][k][2]; // 세로로 오는 경우

                // 대각선의 경우 위와 왼쪽에도 공간이 있어야 한다
                if(info[i - 1][k] != 1 && info[i][k - 1] != 1){
                    dp[i][k][2] = dp[i - 1][k - 1][0] + dp[i - 1][k - 1][1] + dp[i - 1][k - 1][2];
                }
            }
        }
    }
}

int main(void){

    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    input();
    getWay();

    int result = dp[n][n][0] + dp[n][n][1] + dp[n][n][2];
    cout << result;

    return 0;
}
