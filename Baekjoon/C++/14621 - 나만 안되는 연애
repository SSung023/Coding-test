#include <iostream>
#include <vector>
#include <queue>
#include <string.h>
#include <stack>
#include <algorithm>
#include <math.h>

#define MAX 1000 + 1
#define INF 100000000
using namespace std;

class Edge{
public:
    int node[2];
    int distance;

    Edge(int a, int b, int distance){
        this->node[0] = a;
        this->node[1] = b;
        this->distance = distance;
    }
    bool operator < (Edge edge){
        return this->distance < edge.distance;
    }
};

int n, m, parent[MAX], result = 0; // 학교의 수, 도로의 개수
bool isWoman[MAX];
vector<Edge> v;


void initParent(){
    for(int i = 0; i <= n; i++){
        parent[i] = i;
    }
}

int getParent(int x){
    if(x == parent[x])  return x;
    return parent[x] = getParent(parent[x]);
}

bool isParentSame(int a, int b){
    a = getParent(a);
    b = getParent(b);
    return a == b;
}

void unionParent(int a, int b){
    a = getParent(a);
    b = getParent(b);
    int p, target; // 현재 target이 부모노드로 되어 있는 값들을 p로 바꿔준다
    if(a < b){
        target = b;
        p = a;
    }
    else{
        p = b;
        target = a;
    }

    for(int i = 1; i <= n; i++){
        if(parent[i] == target){
            parent[i] = p;
        }
    }
}

bool isOpposite(int s, int e){
    // 서로 반대의 성별을 가진 대학일 때
    if((isWoman[s] && !isWoman[e]) || (!isWoman[s] && isWoman[e])){
        return true;
    }
    else
        return false;
}
void input(){
    scanf("%d %d", &n, &m);

    for(int i = 1; i <= n; i++){
        char tmp;
        scanf(" %c", &tmp);
        if(tmp == 'M'){
            isWoman[i] = false;
        }
        else if(tmp == 'W'){
            isWoman[i] = true;
        }
    }

    for(int i = 0; i < m; i++){
        int s, e, c;
        scanf("%d %d %d", &s, &e, &c);
        if(isOpposite(s, e)){
            v.push_back(Edge(s, e, c));
        }
    }

    initParent();
    sort(v.begin(), v.end());
}

void Dijkstra(){
    result = 0;

    for(int i = 0; i < v.size(); i++){
        if(!isParentSame(v[i].node[0], v[i].node[1])){
            result += v[i].distance;
            unionParent(v[i].node[0], v[i].node[1]);
        }
    }
}

int main(void) {

    input();
    Dijkstra();

    bool flag = true;
    int tmp = parent[1];

    for(int i = 2; i <= n; i++){
        if(tmp != parent[i]){
            flag = false;
            break;
        }
    }

    if(flag){
        printf("%d", result);
    }
    else{
        printf("-1");
    }


    return 0;
}
