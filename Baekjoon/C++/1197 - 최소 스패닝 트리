#include <iostream>
#include <vector>
#include <queue>
#include <string.h>
#include <stack>
#include <algorithm>

#define MAX 100000 + 1
#define INF 100000000
using namespace std;

// 1197 - 최소 스패닝 트리
class Edge{
public:
    int node[2];
    int distance;
    Edge(int a, int b, int distance){
        this->node[0] = a;
        this->node[1] = b;
        this->distance = distance;
    }
    bool operator <(Edge edge){
        return this->distance < edge.distance;
    }
};

int n, m, parent[MAX], sum = 0;
vector<Edge> v;


int getParent(int x){
    if(parent[x] == x){
        return x;
    }
    return parent[x] = getParent(parent[x]);
}

bool isParentSame(int a, int b){
    a = getParent(a);
    b = getParent(b);
    return a == b;
}

void unionParent(int a, int b){
    a = getParent(a);
    b = getParent(b);
    if(a < b){
        parent[b] = a;
    }
    else{
        parent[a] = b;
    }
}

void initParent(){
    for(int i = 1; i <= n; i++){
        parent[i] = i;
    }
}

void input(){
    scanf("%d %d", &n, &m);
    for(int i = 0; i < m; i++){
        int s, e, c;
        scanf("%d %d %d", &s, &e, &c);
        v.push_back(Edge(s,e,c));
    }

    sort(v.begin(), v.end());
    initParent();
}

void Dijkstra(){
    sum = 0;

    for(int i = 0; i < v.size(); i++){
        if(!isParentSame(v[i].node[0], v[i].node[1])){
            sum += v[i].distance;
            unionParent(v[i].node[0], v[i].node[1]);
        }
    }
}

int main(void) {

    input();
    Dijkstra();

    printf("%d", sum);

    return 0;
}
