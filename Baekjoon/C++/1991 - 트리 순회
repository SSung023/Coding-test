#include <iostream>
#include <vector>
#include <queue>
#include <string.h>
#include <stack>

#define MAX 26 + 1
#define INF 100000000
using namespace std;

class Node{
public:
    char data;
    Node* leftChild = NULL;
    Node* rightChild = NULL;

    void setData(char _data, Node* _leftChild, Node* _rightChild){
        this->data = _data;
        this->leftChild = _leftChild;
        this->rightChild = _rightChild;
    }
//    Node(char _data, Node* _leftChild, Node* _rightChild){
//        this->data = _data;
//        this->leftChild = _leftChild;
//        this->rightChild = _rightChild;
//    }
};
int n;

void insertNode(Node* root, Node* node){
    if(root == NULL){
        return;
    }

    if(root->data < node->data){ // 루트보다 값이 더 크다면(오른쪽으로)
        if(root->rightChild == NULL){
            root->rightChild = node;
        }
        else{
            insertNode(root->rightChild, node);
        }
    }
    else if(root->data > node->data){ // 루트보다 값이 더 작아면(왼쪽으로)
        if(root->leftChild == NULL){
            root->leftChild = node;
        }
        else{
            insertNode(root->leftChild, node);
        }
    }
}

void preOrder(Node* tree){ // 전위 순회
    if(tree == NULL)    return;

    //pos.push_back(tree->data);
    printf("%c", tree->data);
    preOrder(tree->leftChild);
    preOrder(tree->rightChild);
}
void inOrder(Node* tree){ // 중위 순회
    if(tree == NULL)    return;

    inOrder(tree->leftChild);
    printf("%c", tree->data);
    inOrder(tree->rightChild);
}
void postOrder(Node* tree){ // 후위 순회
    if(tree == NULL)    return;

    postOrder(tree->leftChild);
    postOrder(tree->rightChild);
    printf("%c", tree->data);
}


int main(void) {

    scanf("%d", &n);

    // 노드 동적 할당
    Node* nodes = new Node[n+1];

    for(int i = 0; i < n; i++){
        char root, left, right;
        scanf(" %c %c %c", &root, &left, &right);
        int nodeNum = root - 'A';
        nodes[nodeNum].data = root;

        if(left == '.'){
            nodes[nodeNum].leftChild = NULL;
        }
        else{
            nodes[nodeNum].leftChild = &nodes[left - 'A']; // 노드 포인터를 사용하기 때문에 주소값을 전달
        }

        if(right == '.'){
            nodes[nodeNum].rightChild = NULL;
        }
        else{
            nodes[nodeNum].rightChild = &nodes[right-'A']; // 노드 포인터를 사용하기 때문에 주소값을 전달
        }

    }

    preOrder(&nodes[0]);
    printf("\n");

    inOrder(&nodes[0]);
    printf("\n");

    postOrder(&nodes[0]);
    printf("\n");

    delete [] nodes;

    return 0;
}
