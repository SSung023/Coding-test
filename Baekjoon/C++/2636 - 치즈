#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>
#include <map>
#include <unordered_set>
#include <unordered_map>

#define INF 987654321
#define MAX 1000000 + 1
using namespace std;

// 2636 - 치즈
int h = 0, w = 0, time = 0, cnt = 0;
int dy[4] = {0, -1, 0, 1}, dx[4] = {-1, 0, 1, 0};

vector<vector<int>> graph;
vector<vector<bool>> isVisited;
queue<pair<int, int>> q;

void input(){
    cin >> h >> w;
    graph.assign(h, vector<int>(w, 0));
    isVisited.assign(h, vector<bool>(w, false));

    for(int i = 0; i < h; i++){
        for(int k = 0; k < w; k++){
            cin >> graph[i][k];
            if(graph[i][k] == 1){
                q.push({i, k});
                cnt++;
            }
        }
    }
}

void init(){
    for(int i = 0; i < h; i++){
        for(int k = 0; k < w; k++){
            isVisited[i][k] = false;
        }
    }
}

bool isConnectedAir(int y, int x){
    queue<pair<int, int>> check;
    check.push({y, x});
    init();
    isVisited[y][x] = true;

    while(!check.empty()){
        int cy = check.front().first;
        int cx = check.front().second;
        check.pop();

        if(cy == 0 || cy == h - 1 || cx == 0 || cx == w - 1)    return true;

        for(int i = 0; i < 4; i++){
            int ny = cy + dy[i];
            int nx = cx + dx[i];
            if(graph[ny][nx] == 0 && !isVisited[ny][nx]){
                isVisited[ny][nx] = true;
                check.push({ny, nx});
            }
        }
    }
    return false;
}

void BFS(){
    int result = cnt;
    while(!q.empty()){
        vector<pair<int, int>> melt;
        int q_size = q.size();
        if(result != 0)    cnt = result;
        time++;

        for(int i = 0; i < q_size; i++){
            bool isMelt = false; // 녹는 치즈인지의 여부
            int cy = q.front().first;
            int cx = q.front().second;
            q.pop();

            for(int i = 0; i < 4; i++){
                int ny = cy + dy[i];
                int nx = cx + dx[i];

                // 뚫린 공기로 판정이 된다면
                if(graph[ny][nx] == 0 && isConnectedAir(ny, nx)){
                    graph[cy][cx] = -1;
                    melt.emplace_back(make_pair(cy, cx));
                    isMelt = true;
                    result--;
                    break;
                }
            }
            if(!isMelt){
                q.push({cy, cx});
            }
        }

        for(int i = 0; i < melt.size(); i++){
            graph[melt[i].first][melt[i].second] = 0;
        }
    }
}

int main(){

    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    input();
    BFS();

    cout << time << '\n' << cnt;

    return 0;
}
