#include <iostream>
#include <cmath>
#include <vector>
#include <stack>
#include <queue>
#include <string>
#include <algorithm>

using namespace std;


queue<pair<int,int>> que; // bfs
int n, m, cnt = 0; // 세로, 가로, 결과값
int dir[4][2] = {{-1,0},{1,0},{0,-1},{0,1}}; // up, down, left, right
int arr[1001][1001]; // 토마토의 자리를 입력받는 배열


bool isInside(int next_x, int next_y){
    return (0 <= next_x && next_x < m) && (0 <= next_y && next_y < n);
}

void BFS(){
    // input에서 받은 익은 토마토의 자리를 토대로 BFS 실행
    while(!que.empty()){
        int cur_y = que.front().first;
        int cur_x = que.front().second;
        que.pop();

        for(int i = 0; i < 4; i++){
            int next_y = cur_y + dir[i][0];
            int next_x = cur_x + dir[i][1];

            // 검사 조건 : 범위 안에 있으며 안 익은 토마토(0)인 경우
            if(isInside(next_x, next_y) && arr[next_y][next_x] == 0){
                arr[next_y][next_x] = arr[cur_y][cur_x] + 1;
                que.push(pair<int, int>(next_y, next_x));
            }
        }

    }
}

void input(){
    scanf("%d %d", &m, &n);

    for(int i = 0; i < n; i++){
        for(int k = 0; k < m; k++){
            scanf("%d", &arr[i][k]);

            // 입력 받으면서 익은 토마토의 자리를 que에 push 해놓는다.
            if(arr[i][k] == 1){
                que.push(pair<int,int>(i,k));
            }
        }
    }
}

int main() {

    input();
    BFS();

    for(int i = 0; i < n; i++){
        for(int k = 0; k < m; k++){
            // 토마토가 모두 익을 수 없는 경우 -1 출력
            if(arr[i][k] == 0){
                cnt = -1;
                printf("%d", cnt);
                return 0;
            }
            // 날짜 갱신
            else if(arr[i][k] > cnt){
                cnt = arr[i][k];
            }
        }
    }

    printf("%d", cnt - 1);


    return 0;
}

