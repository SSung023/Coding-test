#include <iostream>
#include <vector>
#include <stack>
#include <queue>
#include <algorithm>
#include <memory.h>

using namespace std;

const int MAX = 100000 + 1;
int n, k, result = 0, parent[MAX]; // 현재노드 직전이 어디였는지 저장하는 배열
bool isVisited[MAX];
vector<int> path; // 지난 경로를 넣어놓고 나중에 reverse 하여 출력
queue<pair<int, int>> que; // bfs


void input(){
    scanf("%d %d", &n ,&k);
}

void BFS(){
    que.push(make_pair(n, 0));
    isVisited[n] = true;

    while(!que.empty()){
        int curLoc = que.front().first;
        int curSec = que.front().second;
        que.pop();

        if(curLoc == k){
            int idx = curLoc;
            result = curSec;

            while(idx != n){
                path.push_back(idx);
                idx = parent[idx];
            }
            path.push_back(n);
            return;
        }

        if (curLoc + 1 < MAX && !isVisited[curLoc + 1])
        {
            que.push(make_pair(curLoc + 1, curSec + 1));
            isVisited[curLoc + 1] = true;
            parent[curLoc + 1] = curLoc;
        }

        if (curLoc - 1 >= 0 && !isVisited[curLoc - 1])
        {
            que.push(make_pair(curLoc - 1, curSec + 1));
            isVisited[curLoc - 1] = true;
            parent[curLoc - 1] = curLoc;
        }

        if (curLoc * 2 < MAX && !isVisited[curLoc * 2])
        {
            que.push(make_pair(curLoc * 2, curSec + 1));
            isVisited[curLoc * 2] = true;
            parent[curLoc * 2] = curLoc;
        }
    }
}

int main() {

    input();
    BFS();

    printf("%d\n", result);
    for(int i = path.size() - 1; i >= 0; i--){
        printf("%d ", path[i]);
    }

    return 0;
}

