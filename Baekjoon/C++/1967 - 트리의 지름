#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>
#include <map>
#include <unordered_set>
#include <unordered_map>

#define INF 987654321
#define MAX 1000000 + 1
using namespace std;

// 1967 - 트리의 지름
int n;
int max_cost = 0, terminal_node = 0;
vector<bool> isVisited;
vector<vector<pair<int, int>>> graph; // first:next node, second: cost


void input(){
    cin >> n;
    isVisited.assign(n + 1, false);
    graph.assign(n + 1, vector<pair<int, int>>(0, {0,0}));

    for(int i = 0; i < n - 1; i++){
        int parent, child, cost;
        cin >> parent >> child >> cost;
        graph[parent].emplace_back(child, cost);
        graph[child].emplace_back(parent, cost);
    }
}

void DFS(int idx, int cost){

    // 현재 cost보다 더 큰 값을 발견했을 때 갱신
    if(max_cost < cost){
        terminal_node = idx;
        max_cost = cost;
    }

    for(int i = 0; i < graph[idx].size(); i++){
        int next = graph[idx][i].first;
        int next_cost = cost + graph[idx][i].second;

        if(!isVisited[next]){
            isVisited[next] = true;
            DFS(next, next_cost);
        }

    }
}

int main(){

    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    input();

    isVisited[1] = true;
    DFS(1, 0);

    max_cost = 0;
    fill(isVisited.begin(), isVisited.end(), false);
    isVisited[terminal_node] = true;
    DFS(terminal_node, 0);

    cout << max_cost;

    return 0;
}

/* 알고리즘
 * 1. 간선의 정보를 받아서 vector에 저장한다.
 * 2. DFS를 총 두 번 실행한다.
 * 2-1. 루트 노드가 1로 고정이 되어 있으므로 1에서 시작해서 가중치가 가장 높고, 제일 먼 말단 노드를 구한다.
 * 2-2. 말단 노드에서 가장 먼(가중치가 제일 큰) 노드를 구한다. */
