#include <iostream>
#include <vector>
#include <queue>
#include <string.h>
#include <stack>

#define MAX 1000 + 1
using namespace std;

typedef struct {
    int y, x, cost; // 앞으로 길을 뚫을 수 있냐 없냐의 여부
}point;

int n, m;
int graph[MAX][MAX], isVisited[MAX][MAX][2]; // isVisited의 맨 마지막은 여태까지 벽을 부셨는가의 여부 0:부숨, 1:안부숨
int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, -1, 0, 1};
queue<point> q;

void input(){
    scanf("%d %d", &n, &m);

    for(int i = 0; i < n; i++){
        for(int k = 0; k < m; k++){
            scanf("%1d", &graph[i][k]);
        }
    }
}


bool isInside(int y, int x){
    return (0 <= y && y < n)&&(0 <= x && x < m);
}

int BFS(){
    q.push({0,0,1});
    isVisited[0][0][1] = 1;

    while(!q.empty()){
        int cur_y = q.front().y;
        int cur_x = q.front().x;
        int cur_c = q.front().cost;
        q.pop();

        if(cur_x == m - 1 && cur_y == n - 1){
            return isVisited[cur_y][cur_x][cur_c];
        }

        for(int i = 0; i < 4; i++){
            int next_y = cur_y + dy[i];
            int next_x = cur_x + dx[i];

            // graph의 범위 안에서
            if(isInside(next_y, next_x)){
                // 벽이 있고, 벽을 뚫을 수 있다면
                if(graph[next_y][next_x] == 1 && cur_c == 1){
                    q.push({next_y, next_x, cur_c - 1});
                    isVisited[next_y][next_x][cur_c - 1] = isVisited[cur_y][cur_x][cur_c] + 1;
                }
                // 벽이 없고, 아직 방문하지 않았다면
                if(graph[next_y][next_x] == 0 && isVisited[next_y][next_x][cur_c] == 0){
                    q.push({next_y, next_x, cur_c});
                    isVisited[next_y][next_x][cur_c] = isVisited[cur_y][cur_x][cur_c] + 1;
                }
            }
        }
    }

    return -1;
}

int main(void) {

    input();
    int result = BFS();

    printf("%d", result);

    return 0;
}
