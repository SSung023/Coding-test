#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>

#define INF 1000000001
using namespace std;

// 21924 - 도시 건설
int n, m; // 건물의 개수, 도로의 개수
long long sum = 0, total = 0;
vector<vector<pair<int, int>>> graph;
vector<int> isVisited; // 방문 여부

void input() {
    cin >> n >> m;
    graph.assign(n + 1, vector<pair<int, int>>(0));
    isVisited.assign(n + 1, false);

    for(int i = 0; i < m; ++i){
        // 도로를 잇는 두 건물 번호 & 도로의 비용
        int s, e, c;
        cin >> s >> e >> c;
        graph[s].emplace_back(pair<int, int> (e, c));
        graph[e].emplace_back(pair<int, int> (s, c));

        total += c;
    }
}

void prim_using_heap(int start){
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
    pq.push({0, start});

    while(!pq.empty()){
        int dist = pq.top().first;
        int cur = pq.top().second;
        pq.pop();

        if(!isVisited[cur]){
            isVisited[cur] = true;
            sum += dist;

            for(int i = 0; i < graph[cur].size(); ++i){
                int next = graph[cur][i].first;
                int n_dist = graph[cur][i].second;

                if(!isVisited[next]){
                    pq.push({n_dist, next});
                }
            }
        }
    }
}

bool isAllConnected(){
    for(int i = 1; i <= n; ++i){
        if(!isVisited[i])   return false;
    }
    return true;
}

int main(){

    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    input();
    prim_using_heap(1);

    if(isAllConnected()){
        cout << total - sum;
    }
    else{
        cout << "-1";
    }

    return 0;
}
