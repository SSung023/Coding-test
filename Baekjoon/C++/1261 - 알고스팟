#include <iostream>
#include <vector>
#include <queue>
#include <string.h>
#include <stack>
#include <algorithm>
#include <math.h>

#define MAX 100 + 1
#define INF 100000000
using namespace std;

// 1261 - 알고스팟
int m, n; // 가로, 세로
int dist[MAX][MAX];
int graph[MAX][MAX], dx[4] = {-1, 0, 1, 0}, dy[4] = {0, -1, 0, 1};
queue<pair<int, int>> q;


void input(){
    scanf("%d %d", &m, &n);
    for(int i = 0; i < n; i++){
        for(int k = 0; k < m; k++){
            scanf("%1d", &graph[i][k]);
        }
    }

    fill(&dist[0][0], &dist[MAX - 1][MAX - 1], INF);
}

bool isInside(int y, int x){
    return (0 <= x && x < m) && (0 <= y && y < n);
}

void BFS(int y, int x){
    q.push(make_pair(y, x));
    dist[y][x] = 0;

    while(!q.empty()){
        int cy = q.front().first;
        int cx = q.front().second;
        q.pop();

        for(int i = 0; i < 4; i++){
            int ny = cy + dy[i];
            int nx = cx + dx[i];

            if(isInside(ny, nx)){
                if(graph[ny][nx] == 1 && (dist[ny][nx] > dist[cy][cx] + 1)){ // 벽일 때
                    dist[ny][nx] = dist[cy][cx] + 1;
                    q.push(make_pair(ny, nx));
                }
                else if(graph[ny][nx] == 0 && (dist[ny][nx] > dist[cy][cx])){ // 빈 공간일 때
                    dist[ny][nx] = dist[cy][cx];
                    q.push(make_pair(ny, nx));
                }
            }
        }
    }
}

int main(void) {

    input();
    BFS(0, 0);

    printf("%d", dist[n - 1][m - 1]);

    return 0;
}
