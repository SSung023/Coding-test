#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <unordered_map>

using namespace std;

// 3584 - 가장 가까운 공통 조상
int n, u, v, MAX;
vector<vector<int>> graph, parent;
vector<int> depth;


void input(){
    cin >> n;

    graph.assign(n + 1, vector<int> (0, 0));

    MAX = (int)ceil(log2(n));
    parent.assign(n + 1, vector<int>(MAX, 0));
    depth.assign(n + 1, 0);

    for(int i = 0; i < n - 1; i++){
        int a, b; // a가 b의 부모
        cin >> a >> b;
        graph[a].emplace_back(b);
        depth[b]++;
    }
    cin >> u >> v;
}

void DFS(int cur){ // 각 정점의 depth를 구한다.
    for(int next : graph[cur]){
        if(depth[next] == -1){
            parent[next][0] = cur;
            depth[next] = depth[cur] + 1;
            DFS(next);
        }
    }
}

void connect(){ // 각 정점의 2^k번째 부모를 구한다.
    for(int k = 1; k < MAX; k++){
        for(int cur = 1; cur <= n; cur++){
            parent[cur][k] = parent[parent[cur][k - 1]][k - 1];
        }
    }

}

int LCA(int u, int v){
    if(depth[u] <  depth[v])    swap(u, v);
    int diff = depth[u] - depth[v];

    for(int i = 0; diff != 0; i++){ // 정점 u의 depth를 올려준다
        if(diff % 2 == 1)   u = parent[u][i];
        diff /= 2;
   }

    if(u != v){
        for(int i = MAX - 1; i >= 0; i--){
            if(parent[u][i] != -1 && parent[u][i] != parent[v][i]){
                u = parent[u][i];
                v = parent[v][i];
            }
        }
        u = parent[u][0];
    }
    return u;
}

int main(){

    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    int testcase;
    cin >> testcase;
    while(testcase--){
        input();

        int root = 0;
        for(int i = 1; i <= n; i++){
            if(depth[i] == 0){
                root = i;
                break;
            }
        }

        fill(depth.begin(), depth.end(), -1);
        depth[root] = 0;

        DFS(root);
        connect();

        int result = LCA(u, v);
        cout << result << '\n';
    }


    return 0;
}
