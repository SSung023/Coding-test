#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>

#define INF 1000000001
using namespace std;

// 13397 - 구간 나누기 2
int n, m;
int high = 0;
vector<int> score;


void input() {
    cin >> n >> m;
    score.assign(n, 0);

    for(int i = 0; i < n; ++i){
        cin >> score[i];
        high = max(high, score[i]);
    }
}

bool isPossible(int mid){
    int cnt = 1, idx = 0;
    int minimum = score[0], maximum = score[0];

    for(int i = idx + 1; i < n; ++i){
        minimum = min(minimum, score[i]);
        maximum = max(maximum, score[i]);
        int diff = maximum - minimum;

        if(diff > mid){
            ++cnt;
            idx = i;
            // 현재 인덱스까지 한 뭉치를 만들고, 다시 새로 검사를 해야 한다.
            minimum = score[i];
            maximum = score[i];
        }
    }

    if(cnt <= m)    return true;
    else    return false;
}

void solve(){
    int left = 0, right = high;
    int result = INF;

    while(left <= right){
        int mid = (left + right) / 2;

        // m개 이하로 만들어진다면 최대값을 더 작게 만들어본다
        if(isPossible(mid)){
            result = min(result, mid);
            right = mid - 1;
        }
        else{
            left = mid + 1;
        }
    }
    cout << result;
}

int main(){

    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    input();
    solve();

    return 0;
}

/* 구간을 M개 이하로 만들어야 한다.
 * 배열 첫 부분부터 min과 max를 구하고 그 차이가 mid보다 "클 때" ++cnt를 해준다.
 * 이유: 최댓값의 최소값을 구하는 것이다.
 * 때문에 차이가 mid보다 더 커지지 않는다면 아무렇게나 잘라서 m개 이하의 구간을 만들 수 있을 것이다.
 * 반대로 차이가 mid보다 크다면 min과 max를 무조건 한 묶음으로 묶어야 한다. 따라서 한 묶음이 반드시 추가될 것이다.*/
