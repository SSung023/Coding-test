#include <iostream>
#include <vector>
#include <queue>
#include <cstring>

using namespace std;

// 1600 - 말이 되고픈 원숭이
struct Info{
    int y, x, check, cnt;
};
int k, w, h; // k번 다르게 이동 가능, 가로 길이, 세로 길이
int result = -1;
int dy[4] = {0, -1, 0, 1}, dx[4] = {-1, 0, 1, 0};
int h_dy[8] = {-1, -2, -2, -1, 1, 2, 2, 1};
int h_dx[8] = {-2, -1, 1, 2, 2, 1, -1, -2};
vector<vector<short>> graph;
vector<vector<vector<bool>>> isVisited; // [k][y][x]


void input(){
    cin >> k >> w >> h;
    graph.assign(h , vector<short> (w, 0));
    isVisited.assign(k + 1, vector<vector<bool>>(h , vector<bool> (w, false)));

    for(int i = 0; i < h; ++i){
        for(int k = 0; k < w; ++k){
            // 0: 평지, 1: 장애물
            cin >> graph[i][k];
        }
    }
}

bool isInside(int y, int x){
    return (0 <= y && y < h) && (0 <= x && x < w);
}

void BFS(){
    // 시작 위치 {0, 0}, 도착 위치 {h - 1, w - 1}
    queue<Info> q;
    q.push({0, 0, 0, 0});
    isVisited[0][0][0] = true;

    while(!q.empty()){
        int y = q.front().y;
        int x = q.front().x;
        int check = q.front().check;
        int cnt = q.front().cnt;
        q.pop();

        if(y == h - 1 && x == w - 1){
            result = cnt;
            return;
        }

        // 아직 말의 움직임을 할 수 있다면
        if(check < k){
            for(int i = 0; i < 8; ++i){
                int ny = y + h_dy[i];
                int nx = x + h_dx[i];
                if(isInside(ny, nx) && !isVisited[check + 1][ny][nx] && graph[ny][nx] != 1){
                    isVisited[check + 1][ny][nx] = true;
                    q.push({ny, nx, check + 1, cnt + 1});
                }
            }
        }
        // 인접한 네 방향으로 이동
        for(int i = 0; i < 4; ++i){
            int ny = y + dy[i];
            int nx = x + dx[i];
            if(isInside(ny, nx) && !isVisited[check][ny][nx] && graph[ny][nx] != 1){
                isVisited[check][ny][nx] = true;
                q.push({ny, nx, check, cnt + 1});
            }
        }
    }
}

int main() {

    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    input();
    BFS();

    cout << result;

    return 0;
}
