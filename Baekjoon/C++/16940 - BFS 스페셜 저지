#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>

#define INF 1000000000
using namespace std;

// 16940 - BFS 스페셜 저지
int n;
queue<int> result;
vector<vector<int>> graph;



void input(){
    cin >> n;
    graph.assign(n + 1, vector<int> (0, 0));

    for(int i = 0; i < n - 1; ++i){
        int a, b;
        cin >> a >> b;
        graph[a].emplace_back(b);
        graph[b].emplace_back(a);
    }

    for(int i = 0; i < n; ++i){
        int n;
        cin >> n;
        result.push(n);
    }
}

bool BFS(){
    if(result.front() != 1){
        return false;
    }
    vector<int> isVisited(n + 1, false);
    isVisited[1] = true;
    queue<int> q;
    q.push(1);
    result.pop();

    while(!q.empty()){
        int cur = q.front();
        q.pop();

        // 방문해야 할 자식 노드 몇 개인지 확인
        int remain = graph[cur].size();
        for(int next: graph[cur]){
            if(isVisited[next])
                --remain;
        }
        // 자식 노드가 있는지 확인
        while(remain){
            auto iter = find(graph[cur].begin(), graph[cur].end(), result.front());
            if(iter != graph[cur].end()){
                --remain;
                q.push(*iter);
                result.pop();
                isVisited[*iter] = true;
            }
            else{
                return false;
            }
        }
    }
    return true;
}

int main(){

    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    input();
    if(BFS()){
        cout << "1";
    }
    else{
        cout << "0";
    }

    return 0;
}
