#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>
#include <map>
#include <unordered_set>
#include <unordered_map>

#define INF 987654321
#define MAX 1000000 + 1
using namespace std;

// 16174 - 점프왕 쩰리(Large)
int n;
vector<vector<int>> graph, isVisited;

void input(){
    cin >> n;
    graph.assign(n, vector<int>(n, 0));
    isVisited.assign(n, vector<int>(n, false));

    for(int i = 0; i < n; i++){
        for(int k = 0; k < n; k++){
            cin >> graph[i][k];
        }
    }
}

bool isInside(int y, int x){
    return (0 <= y && y < n) && (0 <= x && x < n);
}

bool BFS(){
    queue<pair<int, int>> q;
    q.push({0, 0});
    isVisited[0][0] = true;

    while(!q.empty()){
        int cur_y = q.front().first;
        int cur_x = q.front().second;
        int moveCost = graph[cur_y][cur_x];
        q.pop();

        if(cur_y == n - 1 && cur_x == n - 1){
            return true;
        }

        int ny = cur_y + moveCost;
        int nx = cur_x + moveCost;

        if(isInside(ny, cur_x) && !isVisited[ny][cur_x]){
            q.push({ny, cur_x});
            isVisited[ny][cur_x] = true;
        }
        if(isInside(cur_y, nx) && !isVisited[cur_y][nx]){
            q.push({cur_y, nx});
            isVisited[cur_y][nx] = true;
        }
    }
    return false;
}

int main(){

    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    input();
    if(BFS()){
        cout << "HaruHaru";
    }
    else{
        cout << "Hing";
    }

    return 0;
}
