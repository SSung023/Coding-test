#include <iostream>
#include <algorithm>
#include <string>
#include <string.h>
#include <math.h>
#include <vector>
#include <queue>

#define MAX 50 + 1
using namespace std;

// 17141 - 연구소2
int n, m;
int result = 100000000, tmp, cnt = 0; // 최종 결과 값, 바이러스가 퍼지는데에 걸리는 시간
int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, -1, 0, 1};
bool isVisited[MAX][MAX], flag = false;

vector<pair<int, int>> virusPos; // 바이러스가 들어갈 수 있는 자리의 좌표 전체를 저장
vector<int> virusIdx(10, 0); // virus에서 사용할 자리의 인덱스 (백트래킹을 통해서 정해짐)

vector<vector<int>> lab; // 연구소 지도
vector<vector<int>> testLab; // 테스트할 연구소 지도

queue<pair<int, int>> q;


void input(){
    cin >> n >> m;

    lab.assign(n, vector<int>(n, 0));
    testLab.assign(n, vector<int>(n, 0));

    for(int i = 0; i < n; i++){
        for(int k = 0; k < n; k++){
            cin >> lab[i][k];

            if(lab[i][k] == 1){ // 벽인 경우 아예 -1로 바꿔버린다.
                lab[i][k] = -1;
            }
            else if(lab[i][k] == 2){
                virusPos.push_back(make_pair(i, k));
            }
        }
    }
}

bool isInside(int y, int x){
    return (0 <= y && y < n) && (0 <= x && x < n);
}

void isAllSpread(){
    tmp = 0;
    for(int i = 0; i < n; i++){
        for(int k = 0; k < n; k++){

            if(!isVisited[i][k] && testLab[i][k] != -1){
                flag = false;
                return;
            }
            tmp = max(tmp, testLab[i][k]);
        }
    }
    flag = true;
}

// 바이러스가 얼마만에 퍼지는지 계산
void BFS(){
    while(!q.empty()){
        int cur_y = q.front().first;
        int cur_x = q.front().second;
        q.pop();

        for(int i = 0; i < 4; i++){
            int next_y = cur_y + dy[i];
            int next_x = cur_x + dx[i];

            // 연구소의 지도 범위 안이고, 아직 방문 X, 벽이 아닐 때
            if(isInside(next_y, next_x)){
                if(!isVisited[next_y][next_x] && testLab[next_y][next_x] != -1){
                    testLab[next_y][next_x] = testLab[cur_y][cur_x] + 1;

                    q.push(make_pair(next_y, next_x));
                    isVisited[next_y][next_x] = true;
                }
            }
        }
    }

    // 바이러스 퍼트리기가 끝났으니 이중 for문을 이용하여 얼마나 걸렸는지 확인
    isAllSpread();
    if(flag){ // 바이러스가 모두 퍼진 케이스에만 값을 갱신
        result = min(result, tmp);
        cnt++;
    }

    memset(isVisited, false, sizeof(isVisited));
}

// 바이러스가 있을 수 있는 자리의 조합을 찾아서 BFS 실행
void backTracking(int cnt, int idx){
    if(cnt == m){
        for(int i = 0; i < m; i++){
            int idx = virusIdx[i];
            q.push(make_pair(virusPos[idx].first, virusPos[idx].second));

            isVisited[virusPos[idx].first][virusPos[idx].second] = true;
            testLab[virusPos[idx].first][virusPos[idx].second] = 0;
        }
        BFS();
        return;
    }

    // virus에서 조합이 가능한 인덱스의 조합을 구한다
    for(int i = idx; i < virusPos.size(); i++){
        virusIdx[cnt] = i;
        backTracking(cnt + 1, i + 1);
    }
}

int main(void){

    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    input();
    copy(lab.begin(), lab.end(), testLab.begin());

    backTracking(0, 0);

    if(cnt != 0){
        cout << result;
    }
    else{
        cout << "-1";
    }

    return 0;
}
