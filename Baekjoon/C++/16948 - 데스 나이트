#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>
#include <map>
#include <unordered_set>
#include <unordered_map>

#define INF 987654321
#define MAX 1000000 + 1
using namespace std;

// 16948 - 데스 나이트
struct info{
    int y, x, cnt;
};
int n = 0, result = 0;
int dy[6] = {-2, -2, 0, 0, 2, 2}, dx[6] = {-1, 1, -2, 2, -1, 1};
vector<pair<int, int>> pos(2);
vector<vector<int>> chess;


void input(){
    cin >> n;
    chess.assign(n, vector<int>(n, 0));

    cin >> pos[0].first >> pos[0].second; // r1, c1 (현재 위치)
    cin >> pos[1].first >> pos[1].second; // r2, c2 (목표 위치)
}

bool isInside(int y, int x){
    return (0 <= y && y < n) && (0 <= x && x < n);
}

void BFS(int sy, int sx){
    vector<vector<bool>> isVisited;
    isVisited.assign(n, vector<bool>(n , false));
    isVisited[sy][sx] = true;

    queue<info> q;
    q.push({sy, sx, 0});

    while(!q.empty()){
        int cur_y = q.front().y;
        int cur_x = q.front().x;
        int cur_cnt = q.front().cnt;
        q.pop();

        if(cur_y == pos[1].first && cur_x == pos[1].second){
            result = cur_cnt;
            return;
        }
        for(int i = 0; i < 6; i++){
            int ny = cur_y + dy[i];
            int nx = cur_x + dx[i];
            if(isInside(ny, nx) && !isVisited[ny][nx]){
                isVisited[ny][nx] = true;
                q.push({ny, nx, cur_cnt + 1});
            }
        }
    }
}

int main(){

    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    input();
    BFS(pos[0].first, pos[0].second);

    if(result == 0){
        cout << "-1";
    }
    else{
        cout << result;
    }

    return 0;
}
