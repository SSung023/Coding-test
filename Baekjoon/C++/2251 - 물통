#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>


#define MAX 201
using namespace std;

int A, B, C;
bool isVisited[MAX][MAX][MAX];
vector<int> capacity_c;



void BFS()
{
    queue<pair<pair<int, int>, int>> q;
    q.push(make_pair(make_pair(0, 0), C));

    while (q.empty() == 0)
    {
        int a = q.front().first.first;
        int b = q.front().first.second;
        int c = q.front().second;
        q.pop();

        if (isVisited[a][b][c] == true) continue;
        isVisited[a][b][c] = true;

        if (a == 0) capacity_c.push_back(c);

        // A -> B 이동
        if (a + b > B) q.push(make_pair(make_pair(a + b - B, B), c));
        else q.push(make_pair(make_pair(0, a + b), c));

        // A -> C 이동
        if (a + c > C) q.push(make_pair(make_pair(a + c - C, b), C));
        else q.push(make_pair(make_pair(0, b), a + c));

        // B -> A 이동
        if (b + a > A) q.push(make_pair(make_pair(A, b + a - A), c));
        else q.push(make_pair(make_pair(b + a, 0), c));

        // B -> C 이동
        if (b + c > C) q.push(make_pair(make_pair(a, b + c - C), C));
        else q.push(make_pair(make_pair(a, 0), b + c));

        // C -> A 이동
        if (c + a > A) q.push(make_pair(make_pair(A, b), c + a - A));
        else q.push(make_pair(make_pair(c + a, b), 0));

        // C -> B 이동
        if (c + b > B) q.push(make_pair(make_pair(a, B), c + b - B));
        else q.push(make_pair(make_pair(a, b + c), 0));
    }
}

int main(void)
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> A >> B >> C;
    BFS();

    sort(capacity_c.begin(), capacity_c.end());

    for (int i = 0; i < capacity_c.size(); i++)
    {
        cout << capacity_c[i] << " ";
    }

    return 0;
}
