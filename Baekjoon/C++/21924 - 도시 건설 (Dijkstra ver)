#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>

#define INF 1000000001
using namespace std;

// 21924 - 도시 건설
struct Edge{
    int s, e, distance;

    Edge(int s, int e, int distance){
        this->s = s;
        this->e = e;
        this->distance = distance;
    }
    bool operator < (Edge edge){
        return this->distance < edge.distance;
    }
};
int n, m; // 건물의 개수, 도로의 개수
long long sum = 0, total = 0;
vector<int> parent;
vector<Edge> edge;

void input() {
    cin >> n >> m;

    parent.assign(n + 1, 0);
    for(int i = 0; i < m; ++i){
        // 도로를 잇는 두 건물 번호 & 도로의 비용
        int s, e, c;
        cin >> s >> e >> c;
        edge.emplace_back(Edge(s, e, c));

        total += c;
    }
}

void initParent(){
    for(int i = 1; i <= n; ++i){
        parent[i] = i;
    }
}

int getParent(int x){
    if(x == parent[x])  return x;
    return parent[x] = getParent(parent[x]);
}

void unionParent(int a, int b){
    a = getParent(a);
    b = getParent(b);
    if(a < b)   parent[b] = a;
    else    parent[a] = b;
}

bool isParentSame(int a, int b){
    a = getParent(a);
    b = getParent(b);
    return a == b;
}

void kruskal(){
    sort(edge.begin(), edge.end());
    initParent();

    for(int i = 0; i < edge.size(); ++i){
        // cycle 확인
        if(!isParentSame(edge[i].s, edge[i].e)){
            sum += edge[i].distance;
            unionParent(edge[i].s, edge[i].e);
        }
    }
}

bool isAllConnected(){
    for(int i = 1; i <= n; ++i){
        getParent(i);
    }

    int p = parent[1];
    for(int i = 2; i <= n; ++i){
        if(p != parent[i])  return false;
    }
    return true;
}

int main(){

    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    input();
    kruskal();

    if(isAllConnected()){
        cout << total - sum;
    }
    else{
        cout << "-1";
    }

    return 0;
}
