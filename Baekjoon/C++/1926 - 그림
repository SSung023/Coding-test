#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>

#define INF 1000000000
using namespace std;

// 1926 - 그림
int n, m;
int result = 0;
int dy[4] = {0, -1, 0, 1}, dx[4] = {-1, 0, 1, 0};
vector<vector<int>> picture, isVisited;


void input(){
    cin >> n >> m;
    picture.assign(n, vector<int>(m, 0));
    isVisited.assign(n, vector<int>(m, false));

    for(int i = 0; i < n; ++i){
        for(int k = 0; k < m; ++k){
            cin >> picture[i][k];
        }
    }
}

bool isInside(int y, int x){
    return 0 <= y && y < n && 0 <= x && x < m;
}

int BFS(int y, int x){
    int area = 0;
    queue<pair<int, int>> q;
    q.push({y, x});
    isVisited[y][x] = true;

    while(!q.empty()){
        int y = q.front().first;
        int x = q.front().second;
        ++area;
        q.pop();

        for(int i = 0; i < 4; ++i){
            int ny = y + dy[i];
            int nx = x + dx[i];
            if(isInside(ny, nx) && !isVisited[ny][nx] && picture[ny][nx] == 1){
                isVisited[ny][nx] = true;
                q.push({ny, nx});
            }
        }
    }
    return area;
}

void solve(){
    int cnt = 0;
    for(int i = 0; i < n; ++i){
        for(int k = 0; k < m; ++k){
            if(!isVisited[i][k] && picture[i][k] == 1){
                result = max(result, BFS(i, k));
                ++cnt;
            }
        }
    }
    cout << cnt << '\n' << result;
}

int main(){

    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    input();
    solve();

    return 0;
}
