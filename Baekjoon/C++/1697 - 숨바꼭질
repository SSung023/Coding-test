#include <iostream>
#include <vector>
#include <stack>
#include <queue>
#include <algorithm>
#include <memory.h>

using namespace std;

const int MAX = 100000 + 1;
int n, k, result = 0;
bool isVisited[MAX];


int BFS(int idx){
    queue<pair<int, int>> que; // BFS - first : location, second : sec
    que.push(pair<int, int>(idx, 0)); //  현재 위치, 소요시간 0초
    isVisited[n] = true;

    while(!que.empty()){
        int curLoc = que.front().first;
        int curSec = que.front().second;
        que.pop();

        if(curLoc ==  k){
            return curSec;
        }

        // 갈 수 있는 방향들을 체크해본 후, 갈 수 있다면 queue에 추가
        if(curLoc + 1 < MAX && !isVisited[curLoc + 1]){
            que.push(make_pair(curLoc+1, curSec+1));
            isVisited[curLoc + 1] = true;
        }
        if(curLoc - 1 >= 0 && !isVisited[curLoc - 1]){
            que.push(make_pair(curLoc - 1, curSec+1));
            isVisited[curLoc - 1] = true;
        }
        if(curLoc * 2 < MAX && !isVisited[curLoc * 2]){
            que.push(make_pair(curLoc * 2, curSec+1));
            isVisited[curLoc  * 2] = true;
        }
    }
}

void input(){
    scanf("%d %d", &n, &k);
    isVisited[n] = true;
}

int main() {

    memset(isVisited, false, sizeof(isVisited));
    input();
    
    printf("%d", BFS(n));

    return 0;
}

