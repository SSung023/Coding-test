#include <iostream>
#include <vector>
#include <queue>
#include <string.h>
#include <stack>

#define MAX 50 + 1
#define INF 100000000
using namespace std;

int h, w, result; // 세로, 가로, 결과값
int dist[MAX][MAX]; // 거리 저장
int dy[4] = {0, -1, 0, 1}, dx[4] = {-1, 0, 1, 0};
char graph[MAX][MAX]; // 보물 지도
bool isVisited[MAX][MAX];
queue<pair<int, int>> q; // for BFS



void input(){
    scanf("%d %d", &h, &w);
    for(int i = 0; i < h; i++){
        for(int k = 0; k < w; k++){
            scanf(" %c", &graph[i][k]);
        }
    }
}

void init(){
    memset(isVisited, false, sizeof(isVisited));
    fill(&dist[0][0], &dist[MAX-1][MAX], 0);
}

bool isInside(int y, int x){
    return (0 <= y && y < h) && (0 <= x && x < w);
}

void BFS(int y, int x){
    isVisited[y][x] = true;
    q.push(make_pair(y, x));

    while(!q.empty()){
        int cy = q.front().first;
        int cx = q.front().second;
        q.pop();

        for(int i = 0; i < 4; i++){
            int ny = cy + dy[i];
            int nx = cx + dx[i];

            if(isInside(ny, nx) && !isVisited[ny][nx] && graph[ny][nx] == 'L'){
                isVisited[ny][nx] = true;
                q.push(make_pair(ny, nx));
                dist[ny][nx] = dist[cy][cx] + 1;
                result = max(result, dist[ny][nx]);
            }
        }
    }
}

int main(void) {

    input();

    for(int i = 0; i < h; i++){
        for(int k = 0; k < w; k++){
            if(graph[i][k] == 'L'){
                BFS(i, k);
                init();
            }
        }
    }

    printf("%d", result);

    return 0;
}
