#include <iostream>
#include <vector>
#include <queue>
#include <string.h>
#include <stack>
#include <algorithm>
#include <math.h>

#define MAX 100 + 1
#define INF 100000000
using namespace std;

// 16928 - 뱀과 사다리 게임
int n, m, result = 0; // 사다리의 수, 뱀의 수
int graph[MAX];
int moveInfo[MAX];
bool isVisited[MAX];
queue<pair<int, int>> q; // first: 위치, second : 횟수


void input(){
    memset(moveInfo, -1, sizeof(moveInfo));

    scanf("%d %d", &n, &m);
    // 사다리의 정보
    for(int i = 0; i < n; i++){
        int s, e;
        scanf("%d %d", &s, &e);
        moveInfo[s] = e;
    }
    // 뱀의 정보
    for(int i = 0; i < m; i++){
        int s, e;
        scanf("%d %d", &s, &e);
        moveInfo[s] = e;
    }
}

void BFS(){
    isVisited[1] = true;
    q.push(make_pair(1, 0));

    while(!q.empty()){
        int cur = q.front().first;
        int cnt = q.front().second;
        q.pop();

        if(cur == 100){
            result = cnt;
            return;
        }

        // 주사위의 수가 1~6이 나올 때
        for(int i = 1; i <= 6; i++){
            int next = cur + i; // 주사위 수만큼 이동
            if(next < MAX){ // 이동할 칸이 범위 내 일 때
                if(moveInfo[next] != -1){
                    // 이동할 칸에에 만일 이동정보가 있면 뱀 or 사다리를 따라서 이동
                    isVisited[next] = true;
                    next = moveInfo[next];
                }

                if(!isVisited[next]){
                    q.push(make_pair(next, cnt + 1));
                    isVisited[next] = true;
                }
            }

        }
    }
}

int main(void) {

    input();
    BFS();

    printf("%d", result);

    return 0;
}
