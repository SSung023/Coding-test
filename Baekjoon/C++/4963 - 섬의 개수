#include <iostream>
#include <vector>
#include <stack>
#include <memory.h>

using namespace std;

int testcase, width, height, result = 0;
int arr[51][51];
bool isVisited[51][51];

// 왼쪽부터 시계 방향으로 8가지 방향
int dir_x[8] = {-1, -1, 0, 1, 1, 1, 0, -1};
int dir_y[8] = {0, -1, -1, -1, 0, 1, 1, 1};


// 다음 테스트 케이스를 위해 초기화
void init(){
    result = 0;
    memset(arr, 0, sizeof(arr));
    memset(isVisited, false, sizeof(isVisited));
}

void input(){
    scanf("%d %d", &width, &height);

    for(int i = 0; i < height; i++){
        for(int k = 0;  k < width; k++){
            scanf("%d", &arr[i][k]);
        }
    }
}

bool isInside(int y, int x){
    return (0 <= x && x < width)&&(0 <= y && y < height);
}

void DFS(int y, int x){
    int next_y, next_x;
    isVisited[y][x] = true;

    for(int i = 0; i < 8; i++){
        next_y = y + dir_y[i];
        next_x = x + dir_x[i];

        // map의 범위 안이고 && 아직 방문X && 해당 지점이 1일 때(땅일 때)
        if(isInside(next_y, next_x) && !isVisited[next_y][next_x] && arr[next_y][next_x] == 1){
            isVisited[next_y][next_x] = true;
            DFS(next_y, next_x);
        }
    }
}

int main() {


    while(true){
        input();

        if(width == 0 && height == 0){
            break;
        }


        for(int i = 0; i < height; i++){
            for(int k = 0;  k < width; k++){
                if(arr[i][k] == 1 && !isVisited[i][k]){
                    result++;
                    DFS(i, k);
                }
            }
        }

        printf("%d\n", result);

        init();
    }


    return 0;
}

