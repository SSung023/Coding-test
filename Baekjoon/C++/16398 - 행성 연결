#include <iostream>
#include <vector>
#include <queue>
#include <string.h>
#include <stack>
#include <algorithm>
#include <math.h>

#define MAX 1000 + 1
#define INF 100000000
using namespace std;

class Edge{
public:
    int node[2];
    int distance;

    Edge(int a, int b, int distance){
        this->node[0] = a;
        this->node[1] = b;
        this->distance = distance;
    }
    bool operator < (Edge edge){
        return this->distance < edge.distance;
    }
};

int n, parent[MAX];
long long result = 0;
int graph[MAX][MAX];
vector<Edge> v;


void initParent(){
    for(int i = 0; i <= n; i++){
        parent[i] = i;
    }
}

int getParent(int x){
    if(x == parent[x])  return x;
    return parent[x] = getParent(parent[x]);
}

bool isParentSame(int a, int b){
    a = getParent(a);
    b = getParent(b);
    return a == b;
}

void unionParent(int a, int b){
    a = getParent(a);
    b = getParent(b);
    if(a < b){
        parent[b] = a;
    }
    else{
        parent[a] = b;
    }
}

void input(){
    scanf("%d", &n);

    // 우선 모든 비용을 입력 받는다
    for(int i = 0; i < n; i++){
        for(int k = 0; k < n; k++){
            scanf("%d", &graph[i][k]);
        }
    }
    // 대각선을 중심으로 대칭이므로 한 쪽만 간선을 입력한다
    for(int i = 0; i < n; i++){
        for(int k = i + 1; k < n; k++){
            v.push_back(Edge(i + 1, k + 1, graph[i][k]));
        }
    }

    initParent();
    sort(v.begin(), v.end());
}

void Dijkstra(){
    result = 0;

    for(int i = 0; i < v.size(); i++){
        if(!isParentSame(v[i].node[0], v[i].node[1])){
            result += v[i].distance;
            unionParent(v[i].node[0], v[i].node[1]);
        }
    }
}

int main(void) {

    input();
    Dijkstra();

    cout << result;

    return 0;
}
