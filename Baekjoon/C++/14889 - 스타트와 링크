#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <map>
#include <set>

#define MAX 20 + 1
using namespace std;

int N; // 1 <= N <= 20
int capability[MAX][MAX];
int result = 10000000000;
bool isTeamStart[MAX]; // 1 <=  <= 20
vector<int> teamStart, teamLink;

void input(){
    cin >> N;
    for(int i = 1; i <= N; i++){
        for(int k = 1; k <= N; k++){
            cin >> capability[i][k];
        }
    }
}

void backTracking(int team_num, int idx){
    if(team_num == N/2){
        int value_start = 0, value_link = 0;
        for(int i = 1; i <= N; i++){
            if(isTeamStart[i]){
                teamStart.push_back(i);
            }
            else{
                teamLink.push_back(i);
            }
        }
        // 능력치를 계산해서 최솟값인지 확인하기
        for(int i = 0; i < N/2; i++){
            for(int k = 0; k < N/2; k++){
                value_start += capability[teamStart[i]][teamStart[k]];
                value_link += capability[teamLink[i]][teamLink[k]];
            }
        }
        result = min(result, abs(value_link - value_start));
        teamStart.clear();
        teamLink.clear();
        return;
    }

    for(int i = idx; i <= N; i++){
        isTeamStart[i] = true;
        backTracking(team_num + 1, i + 1);
        isTeamStart[i] = false;
    }

}

int main(void){

    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    input();
    backTracking(0, 1);

    cout << result;

    return 0;
}
