#include <iostream>
#include <vector>
#include <queue>

#define MAX 1000 + 1
using namespace std;

// 14567 - 선수과목(Prerequisite)
int n, m; // 과목의 수, 선수 조건의 수
int inDegree[MAX], result[MAX]; // 진입 차수, 이수 가능한 학기
vector<int> graph[MAX];
queue<int> q;

void input(){
    scanf("%d %d", &n, &m);
    for(int i = 0; i < m; i++){
        int a, b; // a가 b의 선수과목 (a -> b)
        scanf("%d %d", &a, &b);
        graph[a].push_back(b);
        inDegree[b]++;
    }
}

void topologySort(){
    for(int i = 1; i <= n; i++){
        if(inDegree[i] == 0){
            q.push(i);
            result[i] = 1; // 진입차수가 0인 과목들은 1학기에 수강 가능
        }
    }
    for(int i = 1; i <= n; i++){
        if(q.empty()){
            return;
        }
        int cur = q.front();
        q.pop();

        for(int i = 0; i < graph[cur].size(); i++){
            int next = graph[cur][i];
            int tmp = result[cur] + 1; // 연결된 노드이므로 이전 수강 가능 학기에서 1을 더한다
            if(result[next] < tmp){ // 기존의 수강 가능학기보다 더 크다면 갱신
                result[next] = tmp;
            }
            if(--inDegree[next] == 0){
                q.push(next);
            }
        }
    }
}

int main(void) {

    input();
    topologySort();

    for(int i = 1; i <= n; i++){
        printf("%d ", result[i]);
    }

    return 0;
}
